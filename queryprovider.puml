@startuml QueryProvider
!theme vibrant

interface IAsyncQueryProvider {
    ExecuteAsync(expression:Expression) : TResult
}
IQueryProvider <|-- IAsyncQueryProvider

class EntityQueryProvider {
    + EntityQueryProvider(session:ISession)
    + CreateQuery(expression:Expression) : IQueryable
    + CreateQuery(expression:Expression) : IQueryable<TElement>
    + Execute(expression:Expression) : object?
    + Execute(expression:Expression) : TResult
    + ExecuteAsync(expression:Expression) : TResult
}
IAsyncQueryProvider <|-- EntityQueryProvider

class "DbSet"<TEntity> {
    + DbSet(session:ISession)
    + <<virtual>> FindAsync(keyValues:object?[]?) : Task<TEntity?>
    + GetEnumerator() : IEnumerator<TEntity>
    GetEnumerator() : IEnumerator<TEntity>
    GetEnumerator() : IEnumerator
    GetAsyncEnumerator(cancellationToken:CancellationToken) : IAsyncEnumerator<TEntity>
}

class OGMIQueryableExtensions <<static>> {
    + {static} FirstOrDefaultAsync(query:IQueryable<TSource>, predicate:Expression<Func<TSource, bool>>) : Task<TSource?>
}

DbSet -[hidden]-> OGMIQueryableExtensions

@enduml